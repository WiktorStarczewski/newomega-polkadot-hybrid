{
  "metadataVersion": "0.1.0",
  "source": {
    "hash": "0x0dd9af88b5ddd424557222ddfcac5ab03fce9715d13a8d3fbf4def134a0d73a1",
    "language": "ink! 3.0.0-rc4",
    "compiler": "rustc 1.55.0-nightly"
  },
  "contract": {
    "name": "newomegastorage",
    "version": "1.0.0",
    "authors": [
      "Wiktor Starczewski <celrisen@gmail.com>"
    ]
  },
  "spec": {
    "constructors": [
      {
        "args": [
          {
            "name": "new_omega_tokens",
            "type": {
              "displayName": [
                "NewOmegaTokens"
              ],
              "type": 20
            }
          }
        ],
        "docs": [],
        "name": [
          "new"
        ],
        "selector": "0x9bae9d5e"
      },
      {
        "args": [],
        "docs": [],
        "name": [
          "default"
        ],
        "selector": "0xed4b9d1b"
      }
    ],
    "docs": [
      " Isolated storage for all things which should be considered player progress.",
      " This module should only ever change if a serious API change is needed, but otherwise",
      " it should survive most upgrades of the rest of the system, preserving the Game Board",
      " (state of the game) across upgrades and bugfixes.",
      " The only logic that belongs here is accessors for the storage."
    ],
    "events": [],
    "messages": [
      {
        "args": [
          {
            "name": "delegator_address",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Authorises the Delegator contract to fire methods on this one.",
          "",
          " # Arguments",
          "",
          " * `delegator_address` - AccountId of the Delegator contract"
        ],
        "mutates": true,
        "name": [
          "authorise_delegator"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0xdd9c74d2"
      },
      {
        "args": [
          {
            "name": "ranked_address",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Authorises the Ranked contract to fire methods on this one.",
          "",
          " # Arguments",
          "",
          " * `ranked_address` - AccountId of the Ranked contract"
        ],
        "mutates": true,
        "name": [
          "authorise_ranked_contract"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x366c8d53"
      },
      {
        "args": [
          {
            "name": "universe_address",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Authorises the Universe contract to fire methods on this one.",
          "",
          " # Arguments",
          "",
          " * `universe_address` - AccountId of the Universe contract"
        ],
        "mutates": true,
        "name": [
          "authorise_universe_contract"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x97a1583b"
      },
      {
        "args": [
          {
            "name": "industrial_address",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Authorises the Industrial contract to fire methods on this one.",
          "",
          " # Arguments",
          "",
          " * `industrial_address` - AccountId of the Delegator contract"
        ],
        "mutates": true,
        "name": [
          "authorise_industrial_contract"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x36958c59"
      },
      {
        "args": [],
        "docs": [
          " Creates the tokens for minerals."
        ],
        "mutates": true,
        "name": [
          "create_newomega_tokens"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x8f2eb972"
      },
      {
        "args": [
          {
            "name": "token_id",
            "type": {
              "displayName": [
                "TokenId"
              ],
              "type": 12
            }
          },
          {
            "name": "definition",
            "type": {
              "displayName": [
                "ModuleDefinition"
              ],
              "type": 15
            }
          }
        ],
        "docs": [
          " Registers a ModuleDefinition with a module",
          "",
          " # Arguments",
          "",
          " * `token_id` - The token id of the module to register with",
          " * `definition` - The ModuleDefinition to register"
        ],
        "mutates": true,
        "name": [
          "register_module_definition"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x36ad527b"
      },
      {
        "args": [
          {
            "name": "token_id",
            "type": {
              "displayName": [
                "TokenId"
              ],
              "type": 12
            }
          }
        ],
        "docs": [],
        "mutates": true,
        "name": [
          "unregister_module_definition"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x8bab399b"
      },
      {
        "args": [
          {
            "name": "token_id",
            "type": {
              "displayName": [
                "TokenId"
              ],
              "type": 12
            }
          }
        ],
        "docs": [
          " Gets a ModuleDefinition per registered TokenId",
          "",
          " # Arguments",
          "",
          " * `token_id` - The token id of the module to get definition for"
        ],
        "mutates": false,
        "name": [
          "get_module_definition"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "ModuleDefinition"
          ],
          "type": 15
        },
        "selector": "0x66b34524"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "modules",
            "type": {
              "displayName": [],
              "type": 21
            }
          }
        ],
        "docs": [],
        "mutates": false,
        "name": [
          "decode_modules"
        ],
        "payable": false,
        "returnType": {
          "displayName": [],
          "type": 23
        },
        "selector": "0x394c8c42"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Ensures that the player has a trades entry",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player to ensure"
        ],
        "mutates": true,
        "name": [
          "ensure_trades"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x522c7a2a"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Mints the initial assets for a new player",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player to mint for"
        ],
        "mutates": true,
        "name": [
          "mint_initial_assets"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x7bc1cbdd"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "selection",
            "type": {
              "displayName": [],
              "type": 24
            }
          }
        ],
        "docs": [
          " Checks whether the player has enough ships",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player to check ships of",
          " * `selection` - The ship selection to verify for the player",
          "",
          " # Returns",
          "",
          " * `has_enough` - A bool signifying whether the player has enough ships"
        ],
        "mutates": false,
        "name": [
          "has_enough_ships"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "bool"
          ],
          "type": 25
        },
        "selector": "0x6d399dc1"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "amounts",
            "type": {
              "displayName": [],
              "type": 26
            }
          }
        ],
        "docs": [
          " Adds minerals for a player by minting the tokens",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player",
          " * `amounts` - The amounts of minerals to add"
        ],
        "mutates": true,
        "name": [
          "add_minerals"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x660f4ea2"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "amounts",
            "type": {
              "displayName": [],
              "type": 26
            }
          }
        ],
        "docs": [
          " Remove minerals from a player by burning the tokens",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player",
          " * `amounts` - The amounts of minerals to remove"
        ],
        "mutates": true,
        "name": [
          "remove_minerals"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x1faca276"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "amounts",
            "type": {
              "displayName": [],
              "type": 26
            }
          }
        ],
        "docs": [
          " Adds ships for a player",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player",
          " * `amounts` - The amounts of ships to add"
        ],
        "mutates": true,
        "name": [
          "add_ships"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x353e5e47"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "amounts",
            "type": {
              "displayName": [],
              "type": 26
            }
          }
        ],
        "docs": [
          " Removes ships from a player",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player",
          " * `amounts` - The amounts of ships to remove"
        ],
        "mutates": true,
        "name": [
          "remove_ships"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0xfcf63d3f"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Returns how many ships a player has",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player to check ships of",
          "",
          " # Returns",
          "",
          " * `ships` - A Selection of ships the player has"
        ],
        "mutates": false,
        "name": [
          "get_player_ships"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Vec"
          ],
          "type": 27
        },
        "selector": "0x61838863"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Returns how many minerals a player has",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player to check minerals of",
          "",
          " # Returns",
          "",
          " * `minerals` - A Vec of minerals balances the player has"
        ],
        "mutates": false,
        "name": [
          "get_player_minerals"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Vec"
          ],
          "type": 27
        },
        "selector": "0x96bba729"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Returns open trades for a player",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player to check trades of",
          "",
          " # Returns",
          "",
          " * `trades` - A Selection of trades the player has open"
        ],
        "mutates": false,
        "name": [
          "get_trades"
        ],
        "payable": false,
        "returnType": {
          "displayName": [],
          "type": 18
        },
        "selector": "0xc0c49d03"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "resource_id",
            "type": {
              "displayName": [
                "u8"
              ],
              "type": 3
            }
          },
          {
            "name": "trade",
            "type": {
              "displayName": [
                "RegisteredTrade"
              ],
              "type": 19
            }
          }
        ],
        "docs": [
          " Registers a trade for a player.",
          " A trade occurs between two players, and two resources, in a certain amount.",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player to register trade for",
          " * `resource_id` - Which resource to trade away (0..MAX_MINERALS)",
          " * `trade` - Trade structure containing which resource to trade for and in which amount"
        ],
        "mutates": true,
        "name": [
          "register_trade"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x51caa505"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "target",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          },
          {
            "name": "resource_id",
            "type": {
              "displayName": [
                "u8"
              ],
              "type": 3
            }
          },
          {
            "name": "trade",
            "type": {
              "displayName": [
                "RegisteredTrade"
              ],
              "type": 19
            }
          }
        ],
        "docs": [
          " Performs a trade.",
          " A trade occurs between two players, and two resources, in a certain amount.",
          "",
          " # Arguments",
          "",
          " * `caller` - AccountId of the player initiating the trade",
          " * `target` - AccountId of the player to trade with",
          " * `resource_id` - Which resource to trade away (0..MAX_MINERALS)",
          " * `trade` - Trade structure containing which resource to trade for and in which amount"
        ],
        "mutates": true,
        "name": [
          "trade"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0xc4e20988"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Marks a ranked win for a player",
          "",
          " # Arguments",
          "",
          " * `caller` - The account id of the player to mark"
        ],
        "mutates": true,
        "name": [
          "mark_ranked_win"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x82084e89"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Marks a ranked loss for a player",
          "",
          " # Arguments",
          "",
          " * `caller` - The account id of the player to mark"
        ],
        "mutates": true,
        "name": [
          "mark_ranked_loss"
        ],
        "payable": false,
        "returnType": null,
        "selector": "0x5a7fb8b8"
      },
      {
        "args": [],
        "docs": [
          " Gets the current ranked leaderboard.",
          "",
          " # Returns",
          "",
          " * `leaderboard` - A Vec containing a tuple of (player account id, player data)"
        ],
        "mutates": false,
        "name": [
          "get_leaderboard"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Vec"
          ],
          "type": 28
        },
        "selector": "0x091a420a"
      },
      {
        "args": [
          {
            "name": "caller",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 1
            }
          }
        ],
        "docs": [
          " Gets caller's standing in the ranked leaderboard.",
          "",
          " # Returns",
          "",
          " * `ranked_entry` - A PlayerData structure with the leaderboard entry"
        ],
        "mutates": false,
        "name": [
          "get_own_standing"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "PlayerData"
          ],
          "type": 9
        },
        "selector": "0xbee2d9bc"
      }
    ]
  },
  "storage": {
    "struct": {
      "fields": [
        {
          "layout": {
            "cell": {
              "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
              "ty": 1
            }
          },
          "name": "creator"
        },
        {
          "layout": {
            "struct": {
              "fields": [
                {
                  "layout": {
                    "cell": {
                      "key": "0x0100000000000000000000000000000000000000000000000000000000000000",
                      "ty": 4
                    }
                  },
                  "name": "len"
                },
                {
                  "layout": {
                    "array": {
                      "cellsPerElem": 1,
                      "layout": {
                        "cell": {
                          "key": "0x0100000001000000000000000000000000000000000000000000000000000000",
                          "ty": 1
                        }
                      },
                      "len": 4294967295,
                      "offset": "0x0200000000000000000000000000000000000000000000000000000000000000"
                    }
                  },
                  "name": "elems"
                }
              ]
            }
          },
          "name": "owners"
        },
        {
          "layout": {
            "enum": {
              "dispatchKey": "0x0100000001000000000000000000000000000000000000000000000000000000",
              "variants": {
                "0": {
                  "fields": [
                    {
                      "layout": {
                        "struct": {
                          "fields": [
                            {
                              "layout": {
                                "cell": {
                                  "key": "0x0200000001000000000000000000000000000000000000000000000000000000",
                                  "ty": 1
                                }
                              },
                              "name": "account_id"
                            }
                          ]
                        }
                      },
                      "name": null
                    }
                  ]
                },
                "1": {
                  "fields": []
                }
              }
            }
          },
          "name": "new_omega_tokens"
        },
        {
          "layout": {
            "struct": {
              "fields": [
                {
                  "layout": {
                    "struct": {
                      "fields": [
                        {
                          "layout": {
                            "cell": {
                              "key": "0x0200000001000000000000000000000000000000000000000000000000000000",
                              "ty": 5
                            }
                          },
                          "name": "header"
                        },
                        {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "cell": {
                                      "key": "0x0300000001000000000000000000000000000000000000000000000000000000",
                                      "ty": 4
                                    }
                                  },
                                  "name": "len"
                                },
                                {
                                  "layout": {
                                    "array": {
                                      "cellsPerElem": 1,
                                      "layout": {
                                        "cell": {
                                          "key": "0x0300000002000000000000000000000000000000000000000000000000000000",
                                          "ty": 6
                                        }
                                      },
                                      "len": 4294967295,
                                      "offset": "0x0400000001000000000000000000000000000000000000000000000000000000"
                                    }
                                  },
                                  "name": "elems"
                                }
                              ]
                            }
                          },
                          "name": "entries"
                        }
                      ]
                    }
                  },
                  "name": "keys"
                },
                {
                  "layout": {
                    "hash": {
                      "layout": {
                        "cell": {
                          "key": "0x0400000002000000000000000000000000000000000000000000000000000000",
                          "ty": 8
                        }
                      },
                      "offset": "0x0300000002000000000000000000000000000000000000000000000000000000",
                      "strategy": {
                        "hasher": "Blake2x256",
                        "postfix": "",
                        "prefix": "0x696e6b20686173686d6170"
                      }
                    }
                  },
                  "name": "values"
                }
              ]
            }
          },
          "name": "players"
        },
        {
          "layout": {
            "struct": {
              "fields": [
                {
                  "layout": {
                    "struct": {
                      "fields": [
                        {
                          "layout": {
                            "cell": {
                              "key": "0x0400000002000000000000000000000000000000000000000000000000000000",
                              "ty": 5
                            }
                          },
                          "name": "header"
                        },
                        {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "cell": {
                                      "key": "0x0500000002000000000000000000000000000000000000000000000000000000",
                                      "ty": 4
                                    }
                                  },
                                  "name": "len"
                                },
                                {
                                  "layout": {
                                    "array": {
                                      "cellsPerElem": 1,
                                      "layout": {
                                        "cell": {
                                          "key": "0x0500000003000000000000000000000000000000000000000000000000000000",
                                          "ty": 10
                                        }
                                      },
                                      "len": 4294967295,
                                      "offset": "0x0600000002000000000000000000000000000000000000000000000000000000"
                                    }
                                  },
                                  "name": "elems"
                                }
                              ]
                            }
                          },
                          "name": "entries"
                        }
                      ]
                    }
                  },
                  "name": "keys"
                },
                {
                  "layout": {
                    "hash": {
                      "layout": {
                        "cell": {
                          "key": "0x0600000003000000000000000000000000000000000000000000000000000000",
                          "ty": 11
                        }
                      },
                      "offset": "0x0500000003000000000000000000000000000000000000000000000000000000",
                      "strategy": {
                        "hasher": "Blake2x256",
                        "postfix": "",
                        "prefix": "0x696e6b20686173686d6170"
                      }
                    }
                  },
                  "name": "values"
                }
              ]
            }
          },
          "name": "minerals_tokens"
        },
        {
          "layout": {
            "struct": {
              "fields": [
                {
                  "layout": {
                    "struct": {
                      "fields": [
                        {
                          "layout": {
                            "cell": {
                              "key": "0x0600000003000000000000000000000000000000000000000000000000000000",
                              "ty": 5
                            }
                          },
                          "name": "header"
                        },
                        {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "cell": {
                                      "key": "0x0700000003000000000000000000000000000000000000000000000000000000",
                                      "ty": 4
                                    }
                                  },
                                  "name": "len"
                                },
                                {
                                  "layout": {
                                    "array": {
                                      "cellsPerElem": 1,
                                      "layout": {
                                        "cell": {
                                          "key": "0x0700000004000000000000000000000000000000000000000000000000000000",
                                          "ty": 10
                                        }
                                      },
                                      "len": 4294967295,
                                      "offset": "0x0800000003000000000000000000000000000000000000000000000000000000"
                                    }
                                  },
                                  "name": "elems"
                                }
                              ]
                            }
                          },
                          "name": "entries"
                        }
                      ]
                    }
                  },
                  "name": "keys"
                },
                {
                  "layout": {
                    "hash": {
                      "layout": {
                        "cell": {
                          "key": "0x0800000004000000000000000000000000000000000000000000000000000000",
                          "ty": 11
                        }
                      },
                      "offset": "0x0700000004000000000000000000000000000000000000000000000000000000",
                      "strategy": {
                        "hasher": "Blake2x256",
                        "postfix": "",
                        "prefix": "0x696e6b20686173686d6170"
                      }
                    }
                  },
                  "name": "values"
                }
              ]
            }
          },
          "name": "ships_tokens"
        },
        {
          "layout": {
            "struct": {
              "fields": [
                {
                  "layout": {
                    "struct": {
                      "fields": [
                        {
                          "layout": {
                            "cell": {
                              "key": "0x0800000004000000000000000000000000000000000000000000000000000000",
                              "ty": 5
                            }
                          },
                          "name": "header"
                        },
                        {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "cell": {
                                      "key": "0x0900000004000000000000000000000000000000000000000000000000000000",
                                      "ty": 4
                                    }
                                  },
                                  "name": "len"
                                },
                                {
                                  "layout": {
                                    "array": {
                                      "cellsPerElem": 1,
                                      "layout": {
                                        "cell": {
                                          "key": "0x0900000005000000000000000000000000000000000000000000000000000000",
                                          "ty": 13
                                        }
                                      },
                                      "len": 4294967295,
                                      "offset": "0x0a00000004000000000000000000000000000000000000000000000000000000"
                                    }
                                  },
                                  "name": "elems"
                                }
                              ]
                            }
                          },
                          "name": "entries"
                        }
                      ]
                    }
                  },
                  "name": "keys"
                },
                {
                  "layout": {
                    "hash": {
                      "layout": {
                        "cell": {
                          "key": "0x0a00000005000000000000000000000000000000000000000000000000000000",
                          "ty": 14
                        }
                      },
                      "offset": "0x0900000005000000000000000000000000000000000000000000000000000000",
                      "strategy": {
                        "hasher": "Blake2x256",
                        "postfix": "",
                        "prefix": "0x696e6b20686173686d6170"
                      }
                    }
                  },
                  "name": "values"
                }
              ]
            }
          },
          "name": "modules_definitions"
        },
        {
          "layout": {
            "struct": {
              "fields": [
                {
                  "layout": {
                    "struct": {
                      "fields": [
                        {
                          "layout": {
                            "cell": {
                              "key": "0x0a00000005000000000000000000000000000000000000000000000000000000",
                              "ty": 5
                            }
                          },
                          "name": "header"
                        },
                        {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "cell": {
                                      "key": "0x0b00000005000000000000000000000000000000000000000000000000000000",
                                      "ty": 4
                                    }
                                  },
                                  "name": "len"
                                },
                                {
                                  "layout": {
                                    "array": {
                                      "cellsPerElem": 1,
                                      "layout": {
                                        "cell": {
                                          "key": "0x0b00000006000000000000000000000000000000000000000000000000000000",
                                          "ty": 6
                                        }
                                      },
                                      "len": 4294967295,
                                      "offset": "0x0c00000005000000000000000000000000000000000000000000000000000000"
                                    }
                                  },
                                  "name": "elems"
                                }
                              ]
                            }
                          },
                          "name": "entries"
                        }
                      ]
                    }
                  },
                  "name": "keys"
                },
                {
                  "layout": {
                    "hash": {
                      "layout": {
                        "cell": {
                          "key": "0x0c00000006000000000000000000000000000000000000000000000000000000",
                          "ty": 17
                        }
                      },
                      "offset": "0x0b00000006000000000000000000000000000000000000000000000000000000",
                      "strategy": {
                        "hasher": "Blake2x256",
                        "postfix": "",
                        "prefix": "0x696e6b20686173686d6170"
                      }
                    }
                  },
                  "name": "values"
                }
              ]
            }
          },
          "name": "trades"
        }
      ]
    }
  },
  "types": [
    {
      "def": {
        "composite": {
          "fields": [
            {
              "type": 2,
              "typeName": "[u8; 32]"
            }
          ]
        }
      },
      "path": [
        "ink_env",
        "types",
        "AccountId"
      ]
    },
    {
      "def": {
        "array": {
          "len": 32,
          "type": 3
        }
      }
    },
    {
      "def": {
        "primitive": "u8"
      }
    },
    {
      "def": {
        "primitive": "u32"
      }
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "last_vacant",
              "type": 4,
              "typeName": "Index"
            },
            {
              "name": "len",
              "type": 4,
              "typeName": "u32"
            },
            {
              "name": "len_entries",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "Header"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "fields": [
                {
                  "type": 7,
                  "typeName": "VacantEntry"
                }
              ],
              "name": "Vacant"
            },
            {
              "fields": [
                {
                  "type": 1,
                  "typeName": "T"
                }
              ],
              "name": "Occupied"
            }
          ]
        }
      },
      "params": [
        1
      ],
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "Entry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "next",
              "type": 4,
              "typeName": "Index"
            },
            {
              "name": "prev",
              "type": 4,
              "typeName": "Index"
            }
          ]
        }
      },
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "VacantEntry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 9,
              "typeName": "V"
            },
            {
              "name": "key_index",
              "type": 4,
              "typeName": "KeyIndex"
            }
          ]
        }
      },
      "params": [
        9
      ],
      "path": [
        "ink_storage",
        "collections",
        "hashmap",
        "ValueEntry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ranked_wins",
              "type": 4,
              "typeName": "u32"
            },
            {
              "name": "ranked_losses",
              "type": 4,
              "typeName": "u32"
            }
          ]
        }
      },
      "path": [
        "newomegastorage",
        "newomegastorage",
        "PlayerData"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "fields": [
                {
                  "type": 7,
                  "typeName": "VacantEntry"
                }
              ],
              "name": "Vacant"
            },
            {
              "fields": [
                {
                  "type": 3,
                  "typeName": "T"
                }
              ],
              "name": "Occupied"
            }
          ]
        }
      },
      "params": [
        3
      ],
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "Entry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 12,
              "typeName": "V"
            },
            {
              "name": "key_index",
              "type": 4,
              "typeName": "KeyIndex"
            }
          ]
        }
      },
      "params": [
        12
      ],
      "path": [
        "ink_storage",
        "collections",
        "hashmap",
        "ValueEntry"
      ]
    },
    {
      "def": {
        "primitive": "u128"
      }
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "fields": [
                {
                  "type": 7,
                  "typeName": "VacantEntry"
                }
              ],
              "name": "Vacant"
            },
            {
              "fields": [
                {
                  "type": 12,
                  "typeName": "T"
                }
              ],
              "name": "Occupied"
            }
          ]
        }
      },
      "params": [
        12
      ],
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "Entry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 15,
              "typeName": "V"
            },
            {
              "name": "key_index",
              "type": 4,
              "typeName": "KeyIndex"
            }
          ]
        }
      },
      "params": [
        15
      ],
      "path": [
        "ink_storage",
        "collections",
        "hashmap",
        "ValueEntry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "module_stats",
              "type": 16,
              "typeName": "ShipModule"
            },
            {
              "name": "creator",
              "type": 1,
              "typeName": "AccountId"
            }
          ]
        }
      },
      "path": [
        "newomegastorage",
        "newomegastorage",
        "ModuleDefinition"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "snare",
              "type": 3,
              "typeName": "u8"
            },
            {
              "name": "root",
              "type": 3,
              "typeName": "u8"
            },
            {
              "name": "blind",
              "type": 3,
              "typeName": "u8"
            },
            {
              "name": "attack_debuff",
              "type": 3,
              "typeName": "u8"
            },
            {
              "name": "defence_debuff",
              "type": 3,
              "typeName": "u8"
            },
            {
              "name": "range_debuff",
              "type": 3,
              "typeName": "u8"
            }
          ]
        }
      },
      "path": [
        "newomega",
        "newomega",
        "ShipModule"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 18,
              "typeName": "V"
            },
            {
              "name": "key_index",
              "type": 4,
              "typeName": "KeyIndex"
            }
          ]
        }
      },
      "params": [
        18
      ],
      "path": [
        "ink_storage",
        "collections",
        "hashmap",
        "ValueEntry"
      ]
    },
    {
      "def": {
        "array": {
          "len": 4,
          "type": 19
        }
      }
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "amount",
              "type": 12,
              "typeName": "Balance"
            },
            {
              "name": "exchange_for",
              "type": 3,
              "typeName": "u8"
            }
          ]
        }
      },
      "path": [
        "newomegastorage",
        "newomegastorage",
        "RegisteredTrade"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account_id",
              "type": 1,
              "typeName": "AccountId"
            }
          ]
        }
      },
      "path": [
        "newomegatokens",
        "newomegatokens",
        "NewOmegaTokens"
      ]
    },
    {
      "def": {
        "array": {
          "len": 4,
          "type": 22
        }
      }
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None"
            },
            {
              "fields": [
                {
                  "type": 12,
                  "typeName": "T"
                }
              ],
              "name": "Some"
            }
          ]
        }
      },
      "params": [
        12
      ],
      "path": [
        "Option"
      ]
    },
    {
      "def": {
        "array": {
          "len": 4,
          "type": 16
        }
      }
    },
    {
      "def": {
        "array": {
          "len": 4,
          "type": 3
        }
      }
    },
    {
      "def": {
        "primitive": "bool"
      }
    },
    {
      "def": {
        "array": {
          "len": 4,
          "type": 12
        }
      }
    },
    {
      "def": {
        "sequence": {
          "type": 12
        }
      }
    },
    {
      "def": {
        "sequence": {
          "type": 29
        }
      }
    },
    {
      "def": {
        "tuple": [
          1,
          9
        ]
      }
    }
  ]
}